{"version":3,"sources":["components/Header/Header.js","components/Search/Search.js","components/Table/Table.js","components/Main/Main.js","App.js","serviceWorker.js","index.js"],"names":["Header","className","SearchBox","props","type","placeholder","onChange","event","searchLastName","Table","scope","onClick","sortEmplByName","sortEmplByDOB","employees","map","empl","key","id","src","image","alt","firstName","lastName","phone","email","dob","Main","state","search","nameOrdered","dobOrdered","searchName","target","value","foundEmpl","filter","found","toLowerCase","includes","setState","descEmpl","sort","a","b","ascEmpl","Date","Search","this","React","Component","App","Boolean","window","location","hostname","match","ReactDOM","render","StrictMode","document","getElementById","navigator","serviceWorker","ready","then","registration","unregister","catch","error","console","message"],"mappings":"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","file":"static/js/main.f2309c15.chunk.js","sourcesContent":["\nimport React from \"react\";\nimport \"./header.css\";\n\nfunction Header () {\n    return (\n        <div className = \"Header\">\n            <h1>Employee Directory</h1>\n            <p>Click the Name or DOB heading to sort the column or use the search box to search by last name</p>\n        </div>\n        \n    );\n}\n\nexport default Header;","import React from 'react';\nimport \"./search.css\";\n\nfunction SearchBox (props) {\n    return (\n        <div className = \"Search\">\n            <input type = \"text\" placeholder = \"Type Last Name Here\" onChange = {(event) => props.searchLastName(event)}></input>\n        </div>\n    )\n}\n\nexport default SearchBox;","\nimport React from \"react\";\nimport \"./table.css\"\n\n\nfunction Table (props) {\n    return (\n        <div className = \"TableData\"> \n            <table className=\"table table-bordered\">\n                <thead>\n                    <tr>\n                        <th scope=\"col\">ID</th>\n                        <th scope=\"col\">Image</th>\n                        <th scope=\"col\">\n                            <button onClick = {props.sortEmplByName} className = \"btn\">Name  \n                            </button></th>\n                        <th scope=\"col\">Phone</th>\n                        <th scope=\"col\">Email</th>\n                        <th scope=\"col\">\n                            <button onClick = {props.sortEmplByDOB} className = \"btn\">DOB\n                            </button></th>\n                    </tr>\n                </thead>\n                <tbody>\n                    {props.employees.map(empl => {\n                        return (\n                            <tr key={empl.id}>\n                                <td>{empl.id}</td>\n                                <td><img src = {empl.image} alt = \"employee-img\" /></td>\n                                <td>{empl.firstName} {empl.lastName}</td>\n                                <td>{empl.phone}</td>\n                                <td>{empl.email}</td>\n                                <td>{empl.dob}</td>\n                            </tr>\n                        )\n                    })}\n                </tbody>\n            </table>\n        </div>   \n    )   \n}\n\nexport default Table;","import React from 'react';\nimport Header from \"../Header/Header\";\nimport Search from \"../Search/Search\";\nimport Table from \"../Table/Table\";\nimport employees from \"../../utils/randomusers.json\";\nimport \"./main.css\";\n\nclass Main extends React.Component {\n    state = {\n      employees: employees,\n      search: \"\",\n      nameOrdered: \"A\",\n      dobOrdered: \"\" \n    };\n    \n    searchLastName = (event) => {\n       let searchName = event.target.value;\n\n        let foundEmpl = employees.filter(found => {\n            return (\n                found.lastName.toLowerCase().includes(searchName.toLowerCase())\n            )\n        })\n        this.setState({employees: foundEmpl})\n    }\n\n    sortEmplByName = () => {\n //if state ===? then switch to the other state\n        if ( this.state.nameOrdered === \"A\" || this.state.nameOrdered === \"\" ) {\n            let descEmpl = this.state.employees.sort((a,b) =>  a.lastName < b.lastName ? 1 : -1 )\n\n            this.setState({\n                employees: descEmpl,\n                nameOrdered: \"D\",\n                dobOrdered: \"\"\n            });\n        } else {\n            let ascEmpl = this.state.employees.sort((a,b) =>  a.lastName > b.lastName ? 1 : -1 )\n\n            this.setState ({\n                employees: ascEmpl,\n                nameOrdered: \"A\",\n                dobOrdered: \"\"\n            });\n        }\n    }\n\n    sortEmplByDOB = () => {\n        if ( this.state.dobOrdered === \"A\" || this.state.dobOrdered === \"\" ) {\n            let descEmpl = this.state.employees.sort((a,b) =>  new Date(b.dob) - new Date(a.dob))\n\n            this.setState({\n                employees: descEmpl,\n                nameOrdered: \"\",\n                dobOrdered: \"D\"\n            });\n        } else {\n            let ascEmpl = this.state.employees.sort((a,b) =>  new Date(a.dob) - new Date(b.dob))\n\n            this.setState ({\n                employees: ascEmpl,\n                nameOrdered: \"\",\n                dobOrdered: \"A\"\n            });\n        }\n    }\n    \n    render () {\n        return (\n            <div className = \"Main\">\n                <Header />\n                <hr></hr>\n                <Search searchLastName= {this.searchLastName}/>\n                <Table employees= {this.state.employees} sortEmplByName= {this.sortEmplByName} sortEmplByDOB= {this.sortEmplByDOB} />\n            </div>\n        )\n    }\n}  \n\nexport default Main;","import React from 'react';\nimport \"./app.css\"\nimport Main from \"./components/Main/Main\";\n\nfunction App() {\n  return (\n    <div className=\"App\">\n        <Main />\n    </div>\n  );\n}\n\nexport default App;\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.0/8 are considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl, {\n    headers: { 'Service-Worker': 'script' },\n  })\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready\n      .then(registration => {\n        registration.unregister();\n      })\n      .catch(error => {\n        console.error(error.message);\n      });\n  }\n}\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport App from './App';\nimport * as serviceWorker from './serviceWorker';\n\nReactDOM.render(\n  <React.StrictMode>\n    <App />\n  </React.StrictMode>,\n  document.getElementById('root')\n);\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.unregister();\n"],"sourceRoot":""}